#!/usr/bin/env python
# encoding: utf-8

#    This file is part of KSP Tools
#    Â© 2020 LisiasT
#
#    KSP Tools is licensed as follows:
#
#        * GPL 2.0 : https://www.gnu.org/licenses/gpl-2.0.txt
#
#    KSP Tools is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#    You should have received a copy of the GNU General Public License 2.0
#    along with KSP Tools, if not see <https://www.gnu.org/licenses/>.
#
'''
lint -- Checks for obvious errors on config files.

@author:     Lisias

@copyright:  2020 L Aerospace/KSP Division

@license:    GPL 2.0
'''

import sys, os, traceback
from optparse import OptionParser

from ksp.config_node.cfgnode import ConfigNode

__all__ = []
__version__ = 0.2
__date__ = '2020-08-09'
__updated__ = '2020-08-11'

DEBUG = 1
TESTRUN = 0
PROFILE = 0


__total = 0
__errcount = 0

def do_a_file(opts, file):
	global __total, __errcount
	if not file.endswith(".cfg"): return None
	try:
		__total += 1
		node = ConfigNode.load_file(file)
		if opts.verbose > 0: print(file)
		return node
	except Exception as e:
		__errcount += 1
		print(file, e, file=sys.stderr)
		if opts.open_flagged_files:
			os.system("open \"{:s}\"".format(file))


def do_a_dir(opts, current_dir:str) -> list:
	all_files = os.listdir(current_dir)
	all_parts = list()
	for file in all_files:
		fullpath = os.path.join(current_dir, file)
		if os.path.isdir(fullpath):
			all_parts += do_a_dir(opts, fullpath)
		if os.path.isfile(fullpath):
			p = do_a_file(opts, fullpath)
			if p: all_parts.append(p)
	return all_parts

def do_it(opts, args):
	work_dir = args[0]

	r = do_a_dir(opts, work_dir)

	if opts.pretty_print:
		for rr in r:
			print(repr(rr))
			print("---")

def main(argv=None):
	'''Command line options.'''

	global __total, __errcount
	program_name = os.path.basename(sys.argv[0])
	program_version = "v0.1"
	program_build_date = "%s" % __updated__

	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''''' # optional - give further explanation about what the program does
	program_license = "Copyright 2020 Lisias (L Aerospace/KSP Division)                                            \
				Licensed under the GPL 2.0\nhttps://www.gnu.org/licenses/old-licenses/gpl-2.0.html"

	if argv is None:
		argv = sys.argv[1:]
	if 0 == len(argv):
		argv.append("-h")

	try:
		# setup option parser
		parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
		parser.add_option("-v", "--verbose", dest="verbose", action="count", default=0, help="set verbosity level [default: %default]")

		parser.add_option("--author", dest="author")
		parser.add_option("--source-dir", dest="source_dir")
		parser.add_option("--addon-title", dest="addon_title")
		parser.add_option("--addon-version", dest="addon_version")
		parser.add_option("--pretty-print", dest="pretty_print", action="store_true", default=False, help="pretty print all the nodes on the console [default: %default]")
		parser.add_option("--open-flagged-files", dest="open_flagged_files", action="store_true", default=False, help="open the flagged files using the `open` command [default: %default]")


		# process options
		(opts, args) = parser.parse_args(argv)

		if opts.verbose > 0:
			print("verbosity level = %d" % opts.verbose)
		if args[0]:
			args[0] = os.path.abspath(os.path.expanduser(args[0]))

		do_it(opts, args)
		print("{0} files, {1} with errors.".format(__total, __errcount))
		return 0 if 0 == __errcount else -1

	except Exception as e:
		indent = len(program_name) * " "
		sys.stderr.write(program_name + ": " + repr(e) + "\n")
		sys.stderr.write(indent + "  for help use --help")
		if DEBUG:
			traceback.print_exc()
		return 2


if "__main__" == __name__:
	if DEBUG:
		pass
	if TESTRUN:
		import doctest
		doctest.testmod()
	if PROFILE:
		import cProfile
		import pstats
		profile_filename = 'crawler_profile.txt'
		cProfile.run('main()', profile_filename)
		statsfile = open("profile_stats.txt", "wb")
		p = pstats.Stats(profile_filename, stream=statsfile)
		stats = p.strip_dirs().sort_stats('cumulative')
		stats.print_stats()
		statsfile.close()
		sys.exit(0)

	sys.exit(main())
